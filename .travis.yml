sudo: required
dist: xenial
language: java
jdk:
  - openjdk8
env:
  global:
    # Catalog
    - IMAGE_NAME=bluecompute-catalog
    - RELEASE_NAME=catalog
    - TAG=travis-latest
    - SERVICE_PORT=8081
    - MANAGEMENT_PORT=8091
    # Inventory
    - INVENTORY_IMAGE_NAME=ibmcase/bluecompute-inventory:0.6.0
    - INVENTORY_SERVICE_PORT=8080
    - INVENTORY_MANAGEMENT_PORT=8090
    - INVENTORY_RELEASE_NAME=inventory
stages:
  - local build and test
  - docker build, deploy, and test
  - kubernetes build, deploy, and test
jobs:
  include:
    - stage: local build and test
      services:
      - elasticsearch
      - mysql
      - docker
      before_cache:
        - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
        - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
      before_script:
      # Get script with inventory data
      - wget https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-micro-inventory/spring/scripts/mysql_data.sql
      # Wait for MySQL to start, then load it with inventory data
      - until mysql -uroot <mysql_data.sql; do echo "waiting for mysql"; sleep 1; done; echo "Loaded data into database"
      # Start inventory container
      - docker run --net=host --name ${INVENTORY_RELEASE_NAME} -d -p ${INVENTORY_SERVICE_PORT}:${INVENTORY_SERVICE_PORT} -p ${INVENTORY_MANAGEMENT_PORT}:${INVENTORY_MANAGEMENT_PORT} ${INVENTORY_IMAGE_NAME}
      # Check that the container is running
      - docker ps
      # Check logs to see if it started properly
      - docker logs -f ${INVENTORY_RELEASE_NAME} &
      # Let the application start
      - bash scripts/health_check.sh http://127.0.0.1:${INVENTORY_MANAGEMENT_PORT}
      # Test Inventory
      - curl http://127.0.0.1:${INVENTORY_SERVICE_PORT}/micro/inventory
      script:
      # Gradle Build
      - ./gradlew build
      # Start Application
      - java -jar build/libs/micro-${RELEASE_NAME}-0.0.1.jar &
      # Let the application start
      - bash scripts/health_check.sh
      # Wait a few seconds until the catalog is loaded
      - sleep 10
      # Run API Test
      - bash scripts/api_tests.sh 127.0.0.1 ${SERVICE_PORT}
    - stage: docker build, deploy, and test
      services:
      - elasticsearch
      - mysql
      - docker
      install:
        - true
      before_script:
      # Get script with inventory data
      - wget https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-micro-inventory/spring/scripts/mysql_data.sql
      # Wait for MySQL to start, then load it with inventory data
      - until mysql -uroot <mysql_data.sql; do echo "waiting for mysql"; sleep 1; done; echo "Loaded data into database"
      # Start inventory container
      - docker run --net=host --name ${INVENTORY_RELEASE_NAME} -d -p ${INVENTORY_SERVICE_PORT}:${INVENTORY_SERVICE_PORT} -p ${INVENTORY_MANAGEMENT_PORT}:${INVENTORY_MANAGEMENT_PORT} ${INVENTORY_IMAGE_NAME}
      # Check that the container is running
      - docker ps
      # Check logs to see if it started properly
      - docker logs -f ${INVENTORY_RELEASE_NAME} &
      # Let the application start
      - bash scripts/health_check.sh http://127.0.0.1:${INVENTORY_MANAGEMENT_PORT}
      # Test Inventory
      - curl http://127.0.0.1:${INVENTORY_SERVICE_PORT}/micro/inventory
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Start Container and Connect to local Elasticsearch Service
      - docker run --net=host --name ${RELEASE_NAME} -d -p ${SERVICE_PORT}:${SERVICE_PORT} -p ${MANAGEMENT_PORT}:${MANAGEMENT_PORT} "${IMAGE_NAME}:${TAG}"
      # Check that the container is running
      - docker ps
      # Let the application start
      - bash scripts/health_check.sh
      # Wait a few seconds until the catalog is loaded
      - sleep 10
      # Check logs to see if it started properly
      - docker logs -f ${RELEASE_NAME} &
      # Run API Test
      - bash scripts/api_tests.sh 127.0.0.1 ${SERVICE_PORT}
    - stage: kubernetes build, deploy, and test
      services:
      - docker
      env:
      # Minikube variables
      - CHANGE_MINIKUBE_NONE_USER=true
      - MINIKUBE_WANTUPDATENOTIFICATION=false
      - MINIKUBE_WANTREPORTERRORPROMPT=false
      - MINIKUBE_HOME=$HOME
      - KUBECONFIG=$HOME/.kube/config
      # Application variables
      - CHART_NAME=catalog
      - INVENTORY_CHART_NAME=inventory
      - MYSQL_ROOT_PASSWORD=admin123
      - MYSQL_USER=dbuser
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=inventorydb
      install:
        - true
      before_script:
      # Install minikube and helm
      - wget https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-kubernetes/spring/scripts/install_minikube_and_helm.sh && chmod +x install_minikube_and_helm.sh && bash install_minikube_and_helm.sh && rm install_minikube_and_helm.sh
      # Install Elasticsearch Chart
      - helm upgrade --install elasticsearch --version 1.13.2 --set fullnameOverride=${RELEASE_NAME}-elasticsearch,cluster.env.MINIMUM_MASTER_NODES="2",client.replicas=1,master.replicas=2,master.persistence.enabled=false,data.replicas=1,data.persistence.enabled=false stable/elasticsearch
      # Install MySQL
      - helm upgrade --install mysql --version 0.10.2 --set fullnameOverride=${INVENTORY_RELEASE_NAME}-mysql,mysqlRootPassword=${MYSQL_ROOT_PASSWORD},mysqlUser=${MYSQL_USER},mysqlPassword=${MYSQL_PASSWORD},mysqlDatabase=${MYSQL_DATABASE},persistence.enabled=false stable/mysql
      # Install Inventory Chart
      - helm upgrade --install ${INVENTORY_RELEASE_NAME} --version 0.6.0 --set mysql.existingSecret=${INVENTORY_RELEASE_NAME}-mysql ibmcase-charts/inventory
      # Wait for Elasticsearch to start
      - kubectl rollout status deployment/${RELEASE_NAME}-elasticsearch-client
      # Wait for MySQL to start
      - kubectl rollout status deployment/${INVENTORY_RELEASE_NAME}-mysql
      # Wait for Inventory to start
      - kubectl rollout status deployment/${INVENTORY_RELEASE_NAME}-${INVENTORY_CHART_NAME}
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # helm lint
      - helm lint chart/${CHART_NAME}
      # helm package
      - helm package chart/${CHART_NAME}
      # helm install from packaged chart. Use pullPolicy=Never so it uses local docker image
      - CHART_VERSION="$(cat chart/${CHART_NAME}/Chart.yaml | grep version | awk '{print $2}')"
      - helm upgrade --install ${RELEASE_NAME} --set image.repository="${IMAGE_NAME}",image.tag="${TAG}",image.pullPolicy=Never,elasticsearch.host=${RELEASE_NAME}-elasticsearch-client,inventory.url=http://${INVENTORY_RELEASE_NAME}-${INVENTORY_CHART_NAME}:${INVENTORY_SERVICE_PORT} ${CHART_NAME}-${CHART_VERSION}.tgz
      # Get Deployment Name
      - DEPLOYMENT="deployment/${RELEASE_NAME}-${CHART_NAME}"
      # Wait for deployment to be ready
      - kubectl rollout status ${DEPLOYMENT}
      # Get logs
      - kubectl logs -f ${DEPLOYMENT} &
      # Port Forwarding
      - kubectl port-forward ${DEPLOYMENT} ${SERVICE_PORT} ${MANAGEMENT_PORT} &
      - echo "Sleeping for 3 seconds while connection is established..."
      - sleep 3
      # Let the application start
      - bash scripts/health_check.sh
      # Wait a few seconds until the catalog is loaded
      - sleep 10
      # Run API Test
      - bash scripts/api_tests.sh